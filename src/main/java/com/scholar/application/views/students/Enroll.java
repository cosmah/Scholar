package com.scholar.application.views.students;

import com.scholar.application.backend.entities.students.enroll.EnrollmentEntity;
import com.scholar.application.backend.entities.academics.subjects.AddSujects;
import com.scholar.application.backend.services.students.enroll.EnrollmentService;
import com.scholar.application.backend.services.academics.subjects.SubjectService;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.combobox.ComboBox;
import com.vaadin.flow.component.combobox.MultiSelectComboBox;
import com.vaadin.flow.component.datepicker.DatePicker;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.router.PageTitle;
import com.vaadin.flow.router.Route;
import com.scholar.application.views.MainLayout;
import org.springframework.beans.factory.annotation.Autowired;

import java.time.LocalDate;
import java.util.List;
import java.util.logging.Logger;
import java.util.stream.Collectors;

@PageTitle("Enroll Student")
@Route(value = "enroll/student", layout = MainLayout.class)
public class Enroll extends VerticalLayout {

    private final EnrollmentService enrollmentService;
    private final SubjectService subjectService;
    private static final Logger logger = Logger.getLogger(Enroll.class.getName());

    private TextField surnameField;
    private TextField givenNameField;
    private ComboBox<String> genderField;
    private TextField religionField;
    private DatePicker dobField;
    private TextField classroomField;
    private TextField fatherNameField;
    private TextField motherNameField;
    private TextField houseField;
    private TextField homeAddressField;
    private MultiSelectComboBox<String> subjectsField;

    @Autowired
    public Enroll(EnrollmentService enrollmentService, SubjectService subjectService) {
        this.enrollmentService = enrollmentService;
        this.subjectService = subjectService;

        FormLayout form = new FormLayout();
        surnameField = new TextField("Surname");
        givenNameField = new TextField("Given Name");
        genderField = new ComboBox<>("Gender");
        genderField.setItems("Male", "Female", "Other");
        religionField = new TextField("Religion");
        dobField = new DatePicker("Date of Birth");
        classroomField = new TextField("Classroom");
        fatherNameField = new TextField("Father's Name");
        motherNameField = new TextField("Mother's Name");
        houseField = new TextField("House");
        homeAddressField = new TextField("Home Address");
        subjectsField = new MultiSelectComboBox<>("Subjects");

        // Load subjects from the database and set them in the combo box
        List<AddSujects> subjectsList = subjectService.findAllSubjects();
        List<String> subjectNames = subjectsList.stream()
                .map(AddSujects::getSubject)
                .collect(Collectors.toList());
        subjectsField.setItems(subjectNames);

        Button enrollButton = new Button("Enroll Student", event -> {
            try {
                logger.info("Attempting to enroll student...");
                LocalDate dob = dobField.getValue();
                EnrollmentEntity enrollment = new EnrollmentEntity(
                        null, // ID will be generated by the database
                        surnameField.getValue(),
                        givenNameField.getValue(),
                        genderField.getValue(),
                        religionField.getValue(),
                        java.sql.Date.valueOf(dob),
                        classroomField.getValue(),
                        fatherNameField.getValue(),
                        motherNameField.getValue(),
                        houseField.getValue(),
                        homeAddressField.getValue(),
                        String.join(", ", subjectsField.getValue())
                );
                logger.info("Enrollment entity created: " + enrollment.toString());
                EnrollmentEntity savedEnrollment = enrollmentService.saveStudent(enrollment);
                logger.info("Student enrolled successfully: " + savedEnrollment.toString());
                Notification.show("Student enrolled successfully!", 1000, Notification.Position.MIDDLE);
                clearFields();
            } catch (Exception e) {
                logger.severe("Failed to enroll student: " + e.getMessage());
                Notification.show("Failed to enroll student: " + e.getMessage(), 3000, Notification.Position.MIDDLE);
            }
        });

        form.add(
                surnameField, givenNameField, genderField, religionField, dobField,
                classroomField, fatherNameField, motherNameField, houseField,
                homeAddressField, subjectsField, enrollButton
        );
        add(form);
    }

    private void clearFields() {
        surnameField.clear();
        givenNameField.clear();
        genderField.clear();
        religionField.clear();
        dobField.clear();
        classroomField.clear();
        fatherNameField.clear();
        motherNameField.clear();
        houseField.clear();
        homeAddressField.clear();
        subjectsField.clear();
    }
}
